AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  # https://aws.amazon.com/ec2/instance-types/
  EC2InstanceTypeWrk: 
    Description: Instance type to run wrk.
    Type: String
    Default: m5.xlarge
    AllowedValues:
      # General Purpose 
      - t2.micro
      - m5.xlarge
      - m5.2xlarge
      - m5.4large
      # Compute Optimized
      - c5.xlarge
      - c5.2xlarge
      - c5.4large
      # Memory Optimized
      - r5.xlarge
      - r5.2xlarge
      - r5.4large
  EC2InstanceTypeWebServer: 
    Description: Instance type to run the web server
    Type: String
    Default: m5.xlarge
    AllowedValues:
      # General Purpose 
      - t2.micro
      - m5.xlarge
      - m5.2xlarge
      - m5.4large
      # Compute Optimized
      - c5.xlarge
      - c5.2xlarge
      - c5.4large
      # Memory Optimized
      - r5.xlarge
      - r5.2xlarge
      - r5.4large
  IPAddressWrk:
    Description: Local IP address of wrk
    Type: String
    MinLength: "7"
    MaxLength: "15"
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})'
    ConstraintDescription: must be a valid IP of the form x.x.x.x, in the subnet CIDR range 10.0.0.0/16 defined in this template.
  IPAddressWebServer:
    Description: Local IP address of the web server
    Type: String
    MinLength: "7"
    MaxLength: "15"
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})'
    ConstraintDescription: must be a valid IP of the form x.x.x.x, in the subnet CIDR range 10.0.0.0/16 defined in this template.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: "9"
    MaxLength: "18"
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

Resources:
  # Resources for SSM
  # https://docs.aws.amazon.com/systems-manager/latest/userguide/automation-cf.html#automation-cf-create
  RoleSSM:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ssm.amazonaws.com
            - ec2.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      Path: "/"
  InstanceProfileSSM:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref RoleSSM

  # Define VPC and Subnet
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: wrk-test-vpc
  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/16
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: wrk-test-subnet

  # Define Internet Gateway and the attachment to VPC          
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: wrk-test-igateway
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Define Route Table, its Route, and associate the Route Table with the Subnet
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: wrk-test-route-table
  RouteInternetGateway:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTable      
  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet

  # Define Security Group and its inbound rules (= ingress).
  # The outbound (egress) rules are automatically set as "Allow All".
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: wrk-test-security-group
      GroupDescription: security group allowing SSH and ICMP
      VpcId: !Ref VPC
  SecurityGropuIngressInternal:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: -1
      SourceSecurityGroupId: !Ref SecurityGroup
  SecurityGropuIngressSSH:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: !Ref SSHLocation
  SecurityGropuIngressICMP:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: icmp
      FromPort: 8
      ToPort: 8
      CidrIp: !Ref SSHLocation

  # Define EC2 instance for WRK and its associated volumes
  EC2InstanceWrk:
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: "ami-0d7ed3ddb85b521a6"
      InstanceType: !Ref EC2InstanceTypeWrk
      # You should create an EC2 key pair in advance, as there is no key-pair resource in CloudFormation
      # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-console-create-keypair.html
      KeyName: "demo-key-pair"
      # To allow running commands via SSM
      IamInstanceProfile: !Ref InstanceProfileSSM
      UserData:
        Fn::Base64: |
            #!/bin/bash
            yum update -y
            amazon-linux-extras install docker
            service docker start
            usermod -a -G docker ec2-user
            yum -y install git
            cd /home/ec2-user
            git clone https://github.com/richardimaoka/aws-cloudformation-wrk
            docker pull williamyeh/wrk
            yum -y install jq
      NetworkInterfaces: 
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - !Ref SecurityGroup
          SubnetId: !Ref Subnet
          PrivateIpAddresses:
            - PrivateIpAddress: !Ref IPAddressWrk
              Primary: true
      Tags:
      - Key: Name
        Value: wrk-instance

  # Define EC2 instance for Web Server and its associated volumes
  EC2InstanceWebServer:
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: "ami-0d7ed3ddb85b521a6"
      InstanceType: !Ref EC2InstanceTypeWebServer
      # You should create an EC2 key pair in advance, as there is no key-pair resource in CloudFormation
      # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-console-create-keypair.html
      KeyName: "demo-key-pair"
      # To allow running commands via SSM
      IamInstanceProfile: !Ref InstanceProfileSSM
      UserData:
        Fn::Base64: |
            #!/bin/bash
            yum update -y
            amazon-linux-extras install docker
            service docker start
            usermod -a -G docker ec2-user
            yum -y install git
            cd /home/ec2-user
            git clone https://github.com/richardimaoka/aws-cloudformation-wrk
            cd aws-cloudformation-wrk
            ./metadata-web.sh !Ref AWS::StackName
            docker run -d -p 80:80 nginx
      NetworkInterfaces: 
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - !Ref SecurityGroup
          SubnetId: !Ref Subnet
          PrivateIpAddresses:
            - PrivateIpAddress: !Ref IPAddressWebServer
              Primary: true
      Tags:
      - Key: Name
        Value: web-server-instance
