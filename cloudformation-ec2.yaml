AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  VPCStackName:
    Description: Cloudformation stack name of the VPC stack
    Type: String
  # https://aws.amazon.com/ec2/instance-types/
  EC2InstanceTypeWrk: 
    Description: Instance type to run wrk.
    Type: String
    Default: m5.xlarge
    AllowedValues:
      # General Purpose 
      - t2.micro
      - m5.xlarge
      - m5.2xlarge
      - m5.4large
      # Compute Optimized
      - c5.xlarge
      - c5.2xlarge
      - c5.4large
      # Memory Optimized
      - r5.xlarge
      - r5.2xlarge
      - r5.4large
  EC2InstanceTypeWebServer: 
    Description: Instance type to run the web server
    Type: String
    Default: m5.xlarge
    AllowedValues:
      # General Purpose 
      - t2.micro
      - m5.xlarge
      - m5.2xlarge
      - m5.4large
      # Compute Optimized
      - c5.xlarge
      - c5.2xlarge
      - c5.4large
      # Memory Optimized
      - r5.xlarge
      - r5.2xlarge
      - r5.4large
  IPAddressWrk:
    Description: Local IP address of wrk
    Type: String
    MinLength: "7"
    MaxLength: "15"
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})'
    ConstraintDescription: must be a valid IP of the form x.x.x.x, in the subnet CIDR range 10.0.0.0/16 defined in this template.
  IPAddressWebServer:
    Description: Local IP address of the web server
    Type: String
    MinLength: "7"
    MaxLength: "15"
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})'
    ConstraintDescription: must be a valid IP of the form x.x.x.x, in the subnet CIDR range 10.0.0.0/16 defined in this template.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: "9"
    MaxLength: "18"
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

Resources:
  # Define EC2 instance for WRK and its associated volumes
  EC2InstanceWrk:
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: "ami-0d7ed3ddb85b521a6"
      InstanceType: !Ref EC2InstanceTypeWrk
      # You should create an EC2 key pair in advance, as there is no key-pair resource in CloudFormation
      # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-console-create-keypair.html
      KeyName: "demo-key-pair"
      # To allow running commands via SSM
      IamInstanceProfile: {'Fn::ImportValue': !Sub '${VPCStackName}-InstanceProfile'}
      UserData:
        Fn::Base64: |
            #!/bin/bash
            yum update -y
            amazon-linux-extras install docker
            service docker start
            usermod -a -G docker ec2-user
            yum -y install git
            cd /home/ec2-user
            git clone https://github.com/richardimaoka/aws-wrk-athena
            docker pull williamyeh/wrk
            yum -y install jq
      NetworkInterfaces: 
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - {'Fn::ImportValue': !Sub '${VPCStackName}-SecurityGroup'}
          SubnetId: {'Fn::ImportValue': !Sub '${VPCStackName}-Subnet'}
          PrivateIpAddresses:
            - PrivateIpAddress: !Ref IPAddressWrk
              Primary: true
      Tags:
      - Key: Name
        Value: wrk-instance

  # Define EC2 instance for Web Server and its associated volumes
  EC2InstanceWebServer:
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: "ami-0d7ed3ddb85b521a6"
      InstanceType: !Ref EC2InstanceTypeWebServer
      # You should create an EC2 key pair in advance, as there is no key-pair resource in CloudFormation
      # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-console-create-keypair.html
      KeyName: "demo-key-pair"
      # To allow running commands via SSM
      IamInstanceProfile: {'Fn::ImportValue': !Sub '${VPCStackName}-InstanceProfile'}
      UserData:
        Fn::Base64: |
            #!/bin/bash
            yum update -y
            amazon-linux-extras install docker
            service docker start
            usermod -a -G docker ec2-user
            yum -y install git
            cd /home/ec2-user
            git clone https://github.com/richardimaoka/aws-wrk-athena
            cd aws-wrk-athena
            docker run -d -p 80:80 nginx
      NetworkInterfaces: 
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - {'Fn::ImportValue': !Sub '${VPCStackName}-SecurityGroup'}
          SubnetId: {'Fn::ImportValue': !Sub '${VPCStackName}-Subnet'}
          PrivateIpAddresses:
            - PrivateIpAddress: !Ref IPAddressWebServer
              Primary: true
      Tags:
      - Key: Name
        Value: web-server-instance
